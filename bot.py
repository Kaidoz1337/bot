import asyncio
import logging
import json
import sys
import os
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

import config
from database import Database
from states import AdminStates, UserStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('bot.log', encoding='utf-8', mode='a')
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = None
storage = None
dp = None
db = Database()
scheduler = AsyncIOScheduler()

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def format_time_left(expiry_date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    try:
        if not expiry_date_str:
            return "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
            
        expiry_date = datetime.fromisoformat(expiry_date_str)
        now = datetime.now()
        
        # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        if expiry_date.year == 2099:
            return "‚àû (–Ω–∞–≤—Å–µ–≥–¥–∞)"
        
        time_left = expiry_date - now
        
        if time_left.total_seconds() <= 0:
            return "–∏—Å—Ç–µ–∫–ª–∞"
        
        days = time_left.days
        hours = time_left.seconds // 3600
        minutes = (time_left.seconds % 3600) // 60
        
        if days > 0:
            return f"{days} –¥. {hours} —á."
        elif hours > 0:
            return f"{hours} —á. {minutes} –º–∏–Ω."
        else:
            return f"{minutes} –º–∏–Ω."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return "–æ—à–∏–±–∫–∞"

def format_balance(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞"""
    return f"{amount:.2f} —Ä—É–±."

def format_price(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É"""
    return f"{amount:.0f} —Ä—É–±."

        # ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def get_main_keyboard(user_id: int = None) -> ReplyKeyboardMarkup:
            """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    keyboard = [
                        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üì¶ –ü–∞–∫–∏")],
                        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞")]
    ]
    
    if user_id and user_id in config.ADMIN_IDS:
        keyboard.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_profile_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–æ—Ñ–∏–ª—è"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back"),
        InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit")
    ]])

def get_back_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
    ]])

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
            return ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫"), KeyboardButton(text="‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞–º–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)"), KeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")],
            [KeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )

def get_duration_keyboard(pack_id: int = None, is_global: bool = False) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
            if is_global:
                callback_prefix = "global_duration"
        back_callback = "back_to_subscription"
            else:
                callback_prefix = f"duration_{pack_id}"
        back_callback = f"pack_{pack_id}"
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="5 –¥–Ω–µ–π", callback_data=f"{callback_prefix}_5"),
            InlineKeyboardButton(text="10 –¥–Ω–µ–π", callback_data=f"{callback_prefix}_10")
        ],
        [
            InlineKeyboardButton(text="15 –¥–Ω–µ–π", callback_data=f"{callback_prefix}_15"),
            InlineKeyboardButton(text="30 –¥–Ω–µ–π", callback_data=f"{callback_prefix}_30")
        ],
        [
            InlineKeyboardButton(text="–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"{callback_prefix}_forever"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)
        ]
    ])

def get_packs_keyboard(packs: list) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–æ–≤"""
            builder = InlineKeyboardBuilder()
            for pack in packs:
        pack_id, name, description, prices, channel_id, created_at, is_active = pack
                builder.button(text=name, callback_data=f"pack_{pack_id}")
            builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
            builder.adjust(1)
            return builder.as_markup()

def get_pack_detail_keyboard(pack_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –ø–∞–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pack_id}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_packs")
    ]])

def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_global_subscription"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_back")
    ]])

def get_confirmation_keyboard(confirm_data: str = "confirm", cancel_data: str = "cancel") -> InlineKeyboardMarkup:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_data),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=cancel_data)
    ]])

def get_admin_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_deposit"),
            InlineKeyboardButton(text="‚ûñ –°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="admin_withdraw")
        ],
        [
            InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è", callback_data="admin_view_profile"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_user_stats")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]
    ])

def get_pack_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫", callback_data="admin_edit_pack"),
            InlineKeyboardButton(text="üö´ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞–∫", callback_data="admin_deactivate_pack")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        ]
    ])

# ==================== –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
        async def check_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
            try:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                chat_member = await bot.get_chat_member(chat_id=config.PRIVATE_CHANNEL_ID, user_id=user_id)
                is_subscribed = chat_member.status in ['member', 'administrator', 'creator']
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω: {is_subscribed}")
                return is_subscribed
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
                return False

async def update_user_activity(user_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        await db.update_user_activity(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

async def check_expired_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–∫–∏
        expired_packs = await db.get_expired_subscriptions()
        for subscription in expired_packs:
            user_pack_id, user_id, pack_id, purchase_date, expiry_date, amount, status, pack_name, channel_id, username = subscription
            await db.deactivate_expired_subscription(user_pack_id)
            logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {user_pack_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –ø–∞–∫ {pack_name}")
            
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    user_id,
                    f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–∫ '{pack_name}' –∏—Å—Ç–µ–∫–ª–∞. –î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –∑–∞–∫—Ä—ã—Ç."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        expired_global = await db.get_expired_global_subscriptions()
        for user_data in expired_global:
            user_id, username, subscription_until = user_data
            await db.deactivate_global_subscription(user_id)
            logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    user_id,
                    "‚ö†Ô∏è –í–∞—à–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–∞–∫–∞–º –∑–∞–∫—Ä—ã—Ç."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

async def send_subscription_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    try:
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        # –∑–∞ 24 —á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±—É–¥—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ main()

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global bot, storage, dp
    
    logger.info("=== –ó–ê–ü–£–°–ö –ë–û–¢–ê ===")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await db.create_tables()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
        bot = Bot(token=config.BOT_TOKEN)
        storage = MemoryStorage()
        dp = Dispatcher(storage=storage)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...")
        bot_info = await bot.get_me()
        logger.info(f"–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: @{bot_info.username} (ID: {bot_info.id})")
        
        # ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ====================
        @dp.message(Command("start"))
        async def cmd_start(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
            user_id = message.from_user.id
            username = message.from_user.full_name
            
            await update_user_activity(user_id)
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({username})")
            
            try:
                await db.add_user(user_id, username)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î")

                if not await check_subscription(user_id):
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", 
                            url="https://t.me/+7kpMpaDvyc8zNjVi"
                        ),
                    ], [
                        InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
                    ]])
                    
                    await message.answer(
                        "üì¢ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.\n\n"
                        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
                        reply_markup=keyboard
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏")
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    await message.answer(
                        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_main_keyboard(user_id)
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @dp.callback_query(F.data == "check_subscription")
        async def check_subscription_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (callback) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                if await check_subscription(user_id):
                    await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                    await callback.message.answer(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=get_main_keyboard(user_id)
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
                else:
                    await callback.answer(
                        "‚ùå –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞.", 
                        show_alert=True
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

        @dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
        async def profile_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ü—Ä–æ—Ñ–∏–ª—å"""
            user_id = message.from_user.id
            await update_user_activity(user_id)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                user_data = await db.get_user(user_id)
                
                if user_data:
                    user_id_db, username, balance, global_subscription_until, registered_at, last_activity = user_data
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–∫–∏
                    user_packs = await db.get_user_packs(user_id)
                    subscriptions_text = ""
                    
                    if user_packs:
                        for pack in user_packs:
                            user_pack_id, user_id_db, pack_id, purchase_date, expiry_date, amount, status, pack_name, description, channel_id = pack
                            time_left = format_time_left(expiry_date)
                            subscriptions_text += f"\nüì¶ {pack_name}: –æ—Å—Ç–∞–ª–æ—Å—å {time_left}"
                    else:
                        subscriptions_text = "\n‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –ø–∞–∫–∏ –Ω–µ—Ç"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    global_sub_text = ""
                    if global_subscription_until:
                        global_time_left = format_time_left(global_subscription_until)
                        if global_time_left != "–∏—Å—Ç–µ–∫–ª–∞":
                            global_sub_text = f"\nüåü –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –æ—Å—Ç–∞–ª–æ—Å—å {global_time_left}"
                        else:
                            global_sub_text = f"\nüåü –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {global_time_left}"
                    else:
                        global_sub_text = "\nüåü –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
                    profile_text = f"""
üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üÜî ID: `{user_id_db}`
üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(balance)}
üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {registered_at[:10] if registered_at else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
{global_sub_text}
üíé **–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–∫–∏:**{subscriptions_text}
                    """
                    await message.answer(profile_text.strip(), parse_mode="Markdown", reply_markup=get_profile_keyboard())
                    logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                else:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @dp.message(F.text == "üì¶ –ü–∞–∫–∏")
        async def packs_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ü–∞–∫–∏"""
            user_id = message.from_user.id
            await update_user_activity(user_id)
            logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–∞–∫–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                packs = await db.get_packs()
                if not packs:
                    await message.answer(
                        "üì¶ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞–∫–æ–≤ –Ω–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ.", 
                        reply_markup=get_back_keyboard()
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–∞–∫–∏, –Ω–æ –ø–∞–∫–æ–≤ –Ω–µ—Ç")
                    return
                
                await message.answer(
                    "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫:", 
                    reply_markup=get_packs_keyboard(packs)
                )
                logger.info(f"–°–ø–∏—Å–æ–∫ –ø–∞–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        @dp.message(F.text == "‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞")
        async def subscription_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ü–æ–¥–ø–∏—Å–∫–∞"""
            user_id = message.from_user.id
            await update_user_activity(user_id)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                settings = await db.get_global_subscription_settings()
                if not settings:
                    await message.answer(
                        "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", 
                        reply_markup=get_back_keyboard()
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã")
                    return
                
                id, description, prices_json, updated_at = settings
                prices = json.loads(prices_json)
                
                text = f"‚ÑπÔ∏è **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n{description}\n\n"
                text += "üåü **–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–∞–∫–∞–º!**\n\n"
                text += "üí≥ **–¶–µ–Ω—ã:**\n"
                
                for duration, price in prices.items():
                    text += f"‚Ä¢ {duration}: {format_price(price)}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
                    user_data = await db.get_user(user_id)
                    if user_data:
                    user_id_db, username, balance, global_subscription_until, registered_at, last_activity = user_data
                    if global_subscription_until:
                        time_left = format_time_left(global_subscription_until)
                        if time_left != "–∏—Å—Ç–µ–∫–ª–∞":
                            text += f"\n‚úÖ **–í–∞—à —Å—Ç–∞—Ç—É—Å:** –∞–∫—Ç–∏–≤–Ω–∞ ({time_left})"
                        else:
                            text += f"\n‚ùå **–í–∞—à —Å—Ç–∞—Ç—É—Å:** {time_left}"
                    else:
                        text += f"\n‚ùå **–í–∞—à —Å—Ç–∞—Ç—É—Å:** –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
                
                await message.answer(text, parse_mode="Markdown", reply_markup=get_subscription_keyboard())
                logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
                                except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–ê–ö–û–í ====================
        @dp.callback_query(F.data.startswith("pack_"))
        async def pack_detail_handler(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –ø–∞–∫–∞"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
                pack_id = int(callback.data.split("_")[1])
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ—Ç–∞–ª–∏ –ø–∞–∫–∞ {pack_id}")
                
                pack = await db.get_pack(pack_id)
                if pack:
                    pack_id, name, description, prices_json, channel_id, created_at, is_active = pack
                    prices = json.loads(prices_json)
                    
                    text = f"üì¶ **{name}**\n\n{description}\n\n"
                    text += "üí≥ **–¶–µ–Ω—ã:**\n"
                    
                    for duration, price in prices.items():
                        text += f"‚Ä¢ {duration}: {format_price(price)}\n"
                    
                    await callback.message.edit_text(
                        text, 
                        parse_mode="Markdown", 
                        reply_markup=get_pack_detail_keyboard(pack_id)
                    )
                    logger.info(f"–î–µ—Ç–∞–ª–∏ –ø–∞–∫–∞ {pack_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                else:
                    await callback.answer("‚ùå –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    logger.warning(f"–ü–∞–∫ {pack_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–∞", show_alert=True)

        @dp.callback_query(F.data.startswith("buy_"))
        async def buy_pack_handler(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
            data = callback.data.split("_")
            if data[1] == "global":
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∫—É–ø–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                    await buy_global_subscription_handler(callback)
            else:
                pack_id = int(data[1])
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∫—É–ø–∫—É –ø–∞–∫–∞ {pack_id}")
                    await callback.message.edit_text(
                        "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:", 
                        reply_markup=get_duration_keyboard(pack_id)
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

        @dp.callback_query(F.data.startswith("duration_"))
        async def duration_handler(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–∫"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
            data = callback.data.split("_")
            pack_id = int(data[1])
            duration_key = data[2]
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration_key} –¥–ª—è –ø–∞–∫–∞ {pack_id}")
            
                pack = await db.get_pack(pack_id)
                if pack:
                    pack_id, name, description, prices_json, channel_id, created_at, is_active = pack
                    prices = json.loads(prices_json)
                    
                    duration_text = duration_key if duration_key != "forever" else "–Ω–∞–≤—Å–µ–≥–¥–∞"
                    price = prices.get(duration_text, 0)
                    
                    text = f"üõí **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏**\n\n"
                    text += f"üì¶ –ü–∞–∫: {name}\n"
                    text += f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n"
                    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(price)}\n\n"
                    text += "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay_{pack_id}_{duration_key}")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pack_{pack_id}")]
                    ])
                    
                    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
                    logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–∞ {pack_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

        @dp.callback_query(F.data.startswith("pay_"))
        async def payment_handler(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –ø–∞–∫–∞"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
            data = callback.data.split("_")
            pack_id = int(data[1])
            duration_key = data[2]
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –ø–∞–∫ {pack_id} –Ω–∞ {duration_key}")
            
                pack = await db.get_pack(pack_id)
                if pack:
                    pack_id, name, description, prices_json, channel_id, created_at, is_active = pack
                    prices = json.loads(prices_json)
                    
                    duration_text = duration_key if duration_key != "forever" else "–Ω–∞–≤—Å–µ–≥–¥–∞"
                    price = prices.get(duration_text, 0)
                    duration_days = config.SUBSCRIPTION_DURATIONS.get(duration_text, 0)
                    
                    user_data = await db.get_user(user_id)
                    if user_data:
                        user_id_db, username, balance, subscription_until, registered_at, last_activity = user_data
                        
                        if balance >= price:
                            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                            await db.update_balance(user_id, -price)
                            await db.add_user_pack(user_id, pack_id, duration_days, price)
                            await db.add_transaction(
                                user_id, 
                                'purchase', 
                                price, 
                                f"–ü–∞–∫ {name} –Ω–∞ {duration_text}"
                            )
                            
                            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏
                            try:
                                invite_link = await bot.create_chat_invite_link(
                                    chat_id=channel_id,
                                    member_limit=1,
                                    creates_join_request=False
                                )
                                
                                success_text = f"""
‚úÖ **–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üì¶ –ü–∞–∫: {name}
‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(price)}

üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:**
{invite_link.invite_link}

‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è! –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –µ—ë.
"""
                                await callback.message.edit_text(success_text, parse_mode="Markdown")
                                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª –ø–∞–∫ {pack_id}, —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
                                
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                                await callback.message.edit_text(
                                    "‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                                )
                        else:
                            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∫—É–ø–∏—Ç—å –ø–∞–∫ {pack_id}, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–õ–û–ë–ê–õ–¨–ù–û–ô –ü–û–î–ü–ò–°–ö–ò ====================
        async def buy_global_subscription_handler(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
                settings = await db.get_global_subscription_settings()
                if not settings:
                    await callback.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                    return
                
                await callback.message.edit_text(
                    "‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:", 
                    reply_markup=get_duration_keyboard(is_global=True)
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–æ–∫—É–ø–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

        @dp.callback_query(F.data.startswith("global_duration_"))
        async def global_duration_handler(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
                data = callback.data.split("_")
                duration_key = data[2]
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {duration_key} –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
                
                settings = await db.get_global_subscription_settings()
                if settings:
                    id, description, prices_json, updated_at = settings
                    prices = json.loads(prices_json)
                    
                    duration_text = duration_key if duration_key != "forever" else "–Ω–∞–≤—Å–µ–≥–¥–∞"
                    price = prices.get(duration_text, 0)
                    duration_days = config.SUBSCRIPTION_DURATIONS.get(duration_text, 0)
                    
                    user_data = await db.get_user(user_id)
                    if user_data:
                        user_id_db, username, balance, subscription_until, registered_at, last_activity = user_data
                        
                        if balance >= price:
                            # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                            await db.update_balance(user_id, -price)
                            await db.add_global_subscription(user_id, duration_days, price)
                            await db.add_transaction(
                                user_id, 
                                'purchase', 
                                price, 
                                f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {duration_text}"
                            )
                            
                            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫
                            packs = await db.get_packs()
                            links_text = "üîó **–°—Å—ã–ª–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º –ø–∞–∫–∞–º:**\n\n"
                            
                            successful_links = 0
                            for pack in packs:
                                pack_id, name, description, prices_json, channel_id, created_at, is_active = pack
                                try:
                                    invite_link = await bot.create_chat_invite_link(
                                        chat_id=channel_id,
                                        member_limit=1
                                    )
                                    links_text += f"üì¶ {name}: {invite_link.invite_link}\n\n"
                                    successful_links += 1
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–∞–∫–∞ {name}: {e}")
                                    links_text += f"üì¶ {name}: ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏\n\n"
                            
                            success_text = f"""
‚úÖ **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**

üåü –ü–æ–¥–ø–∏—Å–∫–∞: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø
‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(price)}

{links_text}
‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ —Å—Å—ã–ª–æ–∫: {successful_links}/{len(packs)}
‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ! –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∏—Ö.
                            """
                            await callback.message.edit_text(success_text, parse_mode="Markdown")
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É")
                            
                        else:
                            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
                            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è –∫—É–ø–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É, –Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)

        @dp.callback_query(F.data == "menu_back")
        async def menu_back_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
            await callback.message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                reply_markup=get_main_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        @dp.callback_query(F.data == "back_to_packs")
        async def back_to_packs_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–∞–∫–æ–≤"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
                packs = await db.get_packs()
                if packs:
                    await callback.message.edit_text(
                        "üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫:", 
                        reply_markup=get_packs_keyboard(packs)
                    )
                else:
                    await callback.message.edit_text(
                        "üì¶ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞–∫–æ–≤ –Ω–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ.", 
                        reply_markup=get_back_keyboard()
                    )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–∞–∫–æ–≤")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–∞–∫–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

        @dp.callback_query(F.data == "back_to_subscription")
        async def back_to_subscription_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            try:
                settings = await db.get_global_subscription_settings()
                if settings:
                    id, description, prices_json, updated_at = settings
                    prices = json.loads(prices_json)
                    
                    text = f"‚ÑπÔ∏è **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n{description}\n\n"
                    text += "üåü **–î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –ø–∞–∫–∞–º!**\n\n"
                    text += "üí≥ **–¶–µ–Ω—ã:**\n"
                    
                    for duration, price in prices.items():
                        text += f"‚Ä¢ {duration}: {format_price(price)}\n"
                    
                    await callback.message.edit_text(
                        text, 
                        parse_mode="Markdown", 
                        reply_markup=get_subscription_keyboard()
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ====================
        @dp.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        async def admin_panel_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
            user_id = message.from_user.id
            await update_user_activity(user_id)
            
            if user_id in config.ADMIN_IDS:
                await message.answer(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", 
                    reply_markup=get_admin_keyboard()
                )
                logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            else:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–µ–∑ –ø—Ä–∞–≤")

        @dp.message(F.text == "‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        async def back_to_main_menu(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
            user_id = message.from_user.id
            await update_user_activity(user_id)
            
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                reply_markup=get_main_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        @dp.message(F.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        async def admin_info_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            try:
                user_count = await db.get_user_count()
                active_users = await db.get_active_users_count(7)
                total_packs = len(await db.get_packs())
                
                info_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}
üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {active_users}
üì¶ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–æ–≤: {total_packs}
üÜî –í–∞—à ID: {message.from_user.id}
                """
                await message.answer(info_text.strip(), parse_mode="Markdown")
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

        @dp.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        async def admin_stats_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            try:
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
                day_stats = await db.get_transactions_stats(1)
                week_stats = await db.get_transactions_stats(7)
                month_stats = await db.get_transactions_stats(30)
                total_stats = await db.get_transactions_stats()
                
                day_count, day_amount = day_stats or (0, 0)
                week_count, week_amount = week_stats or (0, 0)
                month_count, month_amount = month_stats or (0, 0)
                total_count, total_amount = total_stats or (0, 0)
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                detailed_stats = await db.get_detailed_stats(30)
                if detailed_stats:
                    total_sales, total_income, avg_sale, unique_buyers = detailed_stats
                else:
                    total_sales = total_income = avg_sale = unique_buyers = 0
                
                # –¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
                top_buyers = await db.get_top_buyers(5)
                
                stats_text = f"""
üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂**

üìä **–ó–∞ —Å–µ–≥–æ–¥–Ω—è:**
   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {day_count}
   ‚Ä¢ –°—É–º–º–∞: {format_balance(day_amount or 0)}

üìä **–ó–∞ –Ω–µ–¥–µ–ª—é:**
   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {week_count}
   ‚Ä¢ –°—É–º–º–∞: {format_balance(week_amount or 0)}

üìä **–ó–∞ –º–µ—Å—è—Ü:**
   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {month_count}
   ‚Ä¢ –°—É–º–º–∞: {format_balance(month_amount or 0)}

üìä **–í—Å–µ–≥–æ:**
   ‚Ä¢ –ü—Ä–æ–¥–∞–∂: {total_count}
   ‚Ä¢ –°—É–º–º–∞: {format_balance(total_amount or 0)}

üìã **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (30 –¥–Ω–µ–π):**
   ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {total_sales}
   ‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {format_balance(total_income or 0)}
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_balance(avg_sale or 0)}
   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {unique_buyers}
                """
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                if top_buyers:
                    stats_text += "\nüèÜ **–¢–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:**\n"
                    for i, (user_id, username, total_spent) in enumerate(top_buyers, 1):
                        stats_text += f"   {i}. {username or '–ë–µ–∑ –∏–º–µ–Ω–∏'} ({user_id}): {format_balance(total_spent or 0)}\n"
                
                await message.answer(stats_text.strip(), parse_mode="Markdown")
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

        @dp.message(F.text == "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞–º–∏")
        async def admin_pack_management_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞–º–∏"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            try:
                packs = await db.get_packs()
                if not packs:
                    await message.answer("üì¶ –ü–∞–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞–∫!")
                    return
                
                text = "üì¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
                await message.answer(text, reply_markup=get_pack_management_keyboard(packs), parse_mode="Markdown")
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞–º–∏")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–æ–≤")

        @dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞–∫")
        async def admin_add_pack_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            await message.answer(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞–∫–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                "**–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞**\n"
                "**–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–∞**\n"
                "**ID –∫–∞–Ω–∞–ª–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: -1001234567890)\n"
                "**–¶–µ–Ω—ã** (–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 1–¥–µ–Ω—å:100, 7–¥–Ω–µ–π:500, 30–¥–Ω–µ–π:1500, forever:5000)",
                parse_mode="Markdown"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞
            await AdminStates.adding_pack.set()
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–∫–∞")

        @dp.message(F.text == "‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è)")
        async def admin_global_subscription_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            try:
                settings = await db.get_global_subscription_settings()
                if settings:
                    id, description, prices_json, updated_at = settings
                    prices = json.loads(prices_json)
                    
                    text = f"‚ÑπÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π**\n\n"
                    text += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n\n"
                    text += "**–¶–µ–Ω—ã:**\n"
                    
                    for duration, price in prices.items():
                        text += f"‚Ä¢ {duration}: {format_price(price)}\n"
                    
                    text += f"\n**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {updated_at}"
                    
                    await message.answer(
                        text, 
                        parse_mode="Markdown",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_edit_global_subscription")],
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ])
                    )
                else:
                    await message.answer(
                        "‚ÑπÔ∏è **–ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞**\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å", callback_data="admin_setup_global_subscription")],
                            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                        ]),
                        parse_mode="Markdown"
                    )
                
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–∫—Ä—ã–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –¥–ª—è –∞–¥–º–∏–Ω–∞ {message.from_user.id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏")

        @dp.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
        async def admin_broadcast_handler(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            await message.answer(
                "üì¢ **–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_back")]
                ]),
                parse_mode="Markdown"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            await AdminStates.broadcasting.set()
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É")

        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–°–¢–û–Ø–ù–ò–ô FSM ====================
        @dp.message(AdminStates.adding_pack)
        async def process_add_pack(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            try:
                lines = message.text.strip().split('\n')
                if len(lines) < 4:
                    await message.answer(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                        "**–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞**\n"
                        "**–û–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–∞**\n"
                        "**ID –∫–∞–Ω–∞–ª–∞**\n"
                        "**–¶–µ–Ω—ã** (1–¥–µ–Ω—å:100, 7–¥–Ω–µ–π:500, 30–¥–Ω–µ–π:1500, forever:5000)",
                        parse_mode="Markdown"
                    )
                    return
                
                name = lines[0].strip()
                description = lines[1].strip()
                channel_id = lines[2].strip()
                
                # –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã
                prices_str = lines[3].strip()
                prices = {}
                for price_item in prices_str.split(','):
                    if ':' in price_item:
                        duration, price = price_item.strip().split(':')
                        try:
                            prices[duration.strip()] = float(price.strip())
                        except ValueError:
                            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞.")
                            return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫ –≤ –±–∞–∑—É
                await db.add_pack(name, description, json.dumps(prices), channel_id)
                
                await message.answer(
                    f"‚úÖ **–ü–∞–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                    f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
                    f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}\n"
                    f"**–ö–∞–Ω–∞–ª:** {channel_id}\n"
                    f"**–¶–µ–Ω—ã:** {prices_str}",
                    parse_mode="Markdown",
                    reply_markup=get_admin_keyboard()
                )
                
                await state.finish()
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–∞–∫: {name}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞ –∞–¥–º–∏–Ω–æ–º {message.from_user.id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞–∫–∞")
                await state.finish()

        @dp.message(AdminStates.broadcasting)
        async def process_broadcast(message: types.Message, state: FSMContext):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
            if message.from_user.id not in config.ADMIN_IDS:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return
            
            await update_user_activity(message.from_user.id)
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = await db.get_all_users()
                sent_count = 0
                failed_count = 0
                
                await message.answer("üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
                
                for user_id, username, balance, global_subscription_until, registered_at, last_activity in users:
                    try:
                        await bot.send_message(user_id, message.text)
                        sent_count += 1
                        
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã API
                        await asyncio.sleep(0.05)
                        
                    except Exception as e:
                        failed_count += 1
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                await message.answer(
                    f"‚úÖ **–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
                    f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
                    reply_markup=get_admin_keyboard(),
                    parse_mode="Markdown"
                )
                
                await state.finish()
                logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {sent_count}/{len(users)}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –∞–¥–º–∏–Ω–æ–º {message.from_user.id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏")
                await state.finish()

        # ==================== CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================
        @dp.callback_query(F.data == "admin_back")
        async def admin_back_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            if user_id in config.ADMIN_IDS:
                await callback.message.edit_text(
                    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!",
                    reply_markup=get_admin_keyboard()
                )
                logger.info(f"–ê–¥–º–∏–Ω {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            else:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

        @dp.callback_query(F.data.startswith("admin_edit_pack_"))
        async def admin_edit_pack_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–∞"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            if user_id not in config.ADMIN_IDS:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            try:
                pack_id = int(callback.data.split("_")[-1])
                pack = await db.get_pack(pack_id)
                
                if pack:
                    pack_id, name, description, prices_json, channel_id, created_at, is_active = pack
                    prices = json.loads(prices_json)
                    
                    status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    prices_text = ", ".join([f"{duration}: {format_price(price)}" for duration, price in prices.items()])
                    
                    text = f"""üì¶ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–∞**

**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}
**–û–ø–∏—Å–∞–Ω–∏–µ:** {description}
**–ö–∞–Ω–∞–ª:** {channel_id}
**–¶–µ–Ω—ã:** {prices_text}
**–°—Ç–∞—Ç—É—Å:** {status}
**–°–æ–∑–¥–∞–Ω:** {created_at}"""
                    
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"admin_toggle_pack_{pack_id}")],
                        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_pack_{pack_id}")],
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")]
                    ])
                    
                    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
                    logger.info(f"–ê–¥–º–∏–Ω {user_id} —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ø–∞–∫ {pack_id}")
                else:
                    await callback.answer("‚ùå –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–∞", show_alert=True)

        @dp.callback_query(F.data.startswith("admin_toggle_pack_"))
        async def admin_toggle_pack_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–∞–∫–∞"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            if user_id not in config.ADMIN_IDS:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            try:
                pack_id = int(callback.data.split("_")[-1])
                pack = await db.get_pack(pack_id)
                
                if pack:
                    pack_id, name, description, prices_json, channel_id, created_at, is_active = pack
                    new_status = not is_active
                    
                    await db.update_pack(pack_id, name, description, prices_json, channel_id, new_status)
                    
                    status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
                    await callback.answer(f"‚úÖ –ü–∞–∫ {status_text}", show_alert=True)
                    logger.info(f"–ê–¥–º–∏–Ω {user_id} {status_text} –ø–∞–∫ {pack_id}")
                else:
                    await callback.answer("‚ùå –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–∞–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)

        @dp.callback_query(F.data.startswith("admin_delete_pack_"))
        async def admin_delete_pack_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–∫–∞"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            if user_id not in config.ADMIN_IDS:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            try:
                pack_id = int(callback.data.split("_")[-1])
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_pack_{pack_id}")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_edit_pack_{pack_id}")]
                ])
                
                await callback.message.edit_text(
                    "‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                    "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–∞–∫?\n"
                    "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

        @dp.callback_query(F.data.startswith("admin_confirm_delete_pack_"))
        async def admin_confirm_delete_pack_callback(callback: types.CallbackQuery):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–∫–∞"""
            user_id = callback.from_user.id
            await update_user_activity(user_id)
            
            if user_id not in config.ADMIN_IDS:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            try:
                pack_id = int(callback.data.split("_")[-1])
                await db.delete_pack(pack_id)
                
                await callback.message.edit_text(
                    "‚úÖ **–ü–∞–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!**",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")]
                    ]),
                    parse_mode="Markdown"
                )
                
                logger.info(f"–ê–¥–º–∏–Ω {user_id} —É–¥–∞–ª–∏–ª –ø–∞–∫ {pack_id}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ {user_id}: {e}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

        # ==================== –ù–ê–°–¢–†–û–ô–ö–ê –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê ====================
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
        scheduler.add_job(
            check_expired_subscriptions,
            trigger=CronTrigger(hour="*"),
            id="check_expired_subscriptions",
            replace_existing=True
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00
        scheduler.add_job(
            send_subscription_reminders,
            trigger=CronTrigger(hour=12, minute=0),
            id="send_subscription_reminders",
            replace_existing=True
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 23:59
        scheduler.add_job(
            db.update_daily_stats,
            trigger=CronTrigger(hour=23, minute=59),
            id="update_daily_stats",
            replace_existing=True
        )
        
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï –ë–û–¢–ê: {e}", exc_info=True)
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª–µ bot.log")
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        scheduler.shutdown()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.critical(f"–ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}", exc_info=True)
        print(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
